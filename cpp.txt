// vowel or not


bool Vowel(char ch){
    return (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u'
            ||ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U');
}


*****************************************************************************************************************************************

// fast power  



ll fast_pow(ll base , ll power ) {
    if (power == 0)return 1;
    ll ans = fast_pow(base, power / 2);
    ans *= ans;
    if (power % 2)
        ans *= base;
    return ans;
}


******************************************************************************************************************************************

//fast power mod


ll fast_pow_mod(ll base , ll power,ll mod ) {
    ll res=1;
    while (power>0){
        if (power&1)res=((res%mod)*(base%mod))%mod;
        base*=base;
        base%=mod;
        power/=2;
    }
    return res;
}


*****************************************************************************************************************************************

// ceil

ll ceil(ll a,ll b){
    return (a/b) +(a%b!=0);
}

*****************************************************************************************************************************************
// OPERATIONS 

ll add(ll x, ll a) {return ((a % mod) + (x % mod)) % mod;}
ll mul(ll a , ll b){ return ((a%mod) * (b % mod))%mod; }
ll sub(ll a , ll b){ return ((a%mod) - (b%mod) + mod) % mod; }
ll inv(ll x){return fast_pow_mod(x,mod-2,mod);}

***************************************************************************************************************************************
// ncr

ll ncr_rec(ll n,ll m){
    if (m==0)
        return 1;
    return (n* ncr_rec(n-1,m-1)) / (m);
}

*******************************************************************************************************************************************

// custom sort

bool cmp(pair<int,int>m,pair<int, int>n)
{
    if (m.first!=n.first)return m.first<n.first;
    else return m.second<n.second;
}

*******************************************************************************************************************************************

// prime or not

bool prime(int n){
    bool tmam=1;
    if(n==0||n==1)tmam=0;
    else if(n==2||n==3)tmam=1;
    else
    {int f= sqrt(n);
        for (int i = 2; i <=f ; ++i) {
            if (n%i==0)tmam=0;
        }
    }
    return tmam;
}

*******************************************************************************************************************************************

// number of divisors 

int num [N];
void seive(){
    num[1]=1;
    for (int i = 2; i*i <=N ; ++i) {
        if(num[i]==0){
            for (int j = i; j <=N ; j+=i) {
                int power=0;
                int temp=j;
                while(temp%i==0){

                    power++;
                    temp/=i;
                }
                if (num[j])num[j]*=(power+1);
                else num[j]=(power+1);
            }
        }
    }
}

*************************************************************************************************************************************
// sieve

ll fr_prime[N];
void prime_sieve(){fr_prime[1]=1;
    for (ll i = 2; i*i <N ; ++i) {
        if (!fr_prime[i]){
            for (ll j = i*i; j < N ; j+=i) {
                fr_prime[j]=1;
            }
        }
    }
}



// LPF number of primes in n 
vector<int>fac(N);
vector<bool>is(N , 1);
void get(){
    is[1] = 0;
    for(int i = 2 ; i < N ; i++){
        if(is[i]){
            fac[i] = 1;
            for(int j = i + i ; j < N ; j += i){
                int num = j;
                while(num % i == 0){
                    fac[j]++;
                    num /= i;
                }
                is[j] = 0;
            }
        }
    }
}
***************************************************************************************************************************************
 // order for sort what you want

vec order(200001);
bool cmn (ll a, ll b){
    return order[a]<order[b];
}

***************************************************************************************************************************************
struct segtree{
    int n ;
    vec tree;
    segtree(int x){
        n = 1;
        while (n <= x) n *= 2;
        tree.resize(n * 2 + 5);
    }
    ll merge (ll l , ll r ){
        return max(l,r);
    }
    void update(int ind , ll val){
        update(1 , 0 , n - 1  , ind , val);
    }
    void update(int node ,int l ,int r , int ind , ll val){
        if(ind > r || ind < l) return;
        if(ind == l && l == r) {
            tree[node] = val;
            return;
        }
        int mid = ( l + r) / 2;
        update(node * 2 , l , mid , ind , val);
        update(node * 2  + 1, mid + 1 , r , ind , val);
        tree[node]  = merge(tree[node * 2] , tree[node * 2 + 1]);
    }
    ll get (int l , int r){
        return get(1 , 0 , n - 1 , l , r);
    }
    ll get(int node , int cur_l , int cur_r , int l , int r){
        if(cur_r < l ||  cur_l > r)return -2e9;
        if(cur_r <= r && cur_l >= l)return tree[node];
        int mid = (cur_l + cur_r) / 2;
        return merge(get(node * 2 , cur_l , mid , l , r ) , get (node * 2 + 1 , mid + 1 , cur_r , l , r));
    }
};
**********************************************************************************************************
floyed alogorithm

for (int i = 0; i <n ; ++i) 
            for (int j = 0; j <n ; ++j) 
                for (int k = 0; k <n ; ++k) 
                    dis[j][k] = min(dis[j][k], dis[j][i]+dis[i][k]);
**********************************************************************************************************
// dsu
struct dsu{
    vector<int>size ,par;
    dsu(int n ){
        size.resize(n+5,1) ;
        par.resize(n+5);
        for (int i = 1; i <=n ; ++i) par[i] = i;
    }
    int find_par(int u){
        if (par[u] == u) return u;
        return par[u] = find_par(par[u]);
    }
    void link (int u , int v){
        int par_u = find_par(u) , par_v = find_par(v) ;
        if (par_u == par_v) return;
        if(size[par_u] > size[par_v]){
            // attach comp of v to u (smaller to larger )
            // size of u will increase by size of v
            size[par_u] += size[par_v] ;
            // change the parent of v to be the parent of u 
            // example if the parent of v = 2 & the parent of u = 8 -> you will make this par[2] = 8
            // This mean the node 2 --> 8 and when you go from children of 2 to search about parent you will answer by 8
            par[par_v] = par_u;
        }
        else {
            size[par_v] += size[par_u];
            par[par_u] = par_v ;
        }
    }
};
*******************************************************************************************
prim"s algo

  vec vis (n+2);
        priority_queue<pair<ll,pi>,vector<pair<ll,pi>>,greater<>>pq;
        pq.push({0,{1,0}});
        ll ans = 0;
        while (pq.size()){
            auto [w,x] = pq.top();
            auto [u,v] = x;
            pq.pop();
            if (vis[u])continue;
            vis[u] = 1;
            //cout<< u << " -> "<< v <<" "<<mp[{u,v}]<<endl;
            ans += w;
            for(auto [ch,ww]:adj[u]){
                if (!vis[ch])pq.push({ww,{ch,u}});
            }
        }
*************************************************************************************************
extended eculidien algo
ll ext_gcd(ll a , ll b , ll &pa , ll &pb , ll g){
    if (b == 0){
        pa = (g ? g / a : 1 );
        pb = 0;
        return a;
    }
    ll aa , bb ;
    ll GCD = ext_gcd(b,a%b,aa,bb,g);
    pa = bb , pb = aa - ((a/b)*bb);
    return GCD;
}
// cal all of values of x 
vector<ll>val(ll a , ll b , ll n){
    // ax === b ( mod n )
    // A*(a/r) + B*(b/r) = 1
    // x === A * (b/r)  (mod n/r)
    // cal A
    ll A , B ;
    ll r = ext_gcd(a,b,A,B,0);
    ll x = A * (b/r) ;
    vector<ll>sol;
    sol.push_back(x);
    for (int i = 1; i <r ; ++i) sol.push_back(x + i*(n/r));
    for (int i = 0; i <r ; ++i) sol[i] =( sol[i] + n % n );
    return sol;
}
*****************************************************************************************************
// lca
int logg = 0;
vector<vector<int>>up;
vector<ll>dep;
void cal_up (int node , int par){
    up[node][0] = par ; // base case
    for (int i = 1; i < logg ; ++i)
        up[node][i] = up[up[node][i-1]][i-1]; // 2^x = 2^(x-1) + 2^(x-1) ;
}
void dfs(int node  , int par , vector<int>adj[]){
    dep[node] = dep[par] + 1;
    cal_up(node,par);
    for(auto &ch : adj[node])
        if(ch != par)dfs(ch,node,adj);
}
int kth_ansector(int node , int k){
    if (k == 0)return node;
    int ans = node;
    // divide K as 2^i + 2^i + .....
    for (int i = 0; i <logg ; ++i) {
        if (k & (1 << i)) ans = up[ans][i];
    }
    return ans;
}
int lca (int u , int v){
    if (dep[u] < dep[v]) swap(u,v); //always node u is deeper than v
    int x = dep[v] , y = dep[u] - dep[v];
    u = kth_ansector(u, y); // find the ansector is equal u in the depth
    // now u and v in the same level
    if (u == v) return u ; // is the same node now
    for (int i = logg - 1; i >=0 ; --i) {
        if (up[u][i] == up[v][i]) continue;
        u = up[u][i] , v = up[v][i];// after up still not as the same ansector
    }
    return up[u][0] ;
}
**********************************************************************************
hash
const ll N = 200001, mod1 = 1e9 + 7, base1 = 127 , base2 = 131 , mod2 = 2e9 + 11;
int pow1[N] , pow2[N];
void pre(){
    pow1[0] = pow2[0] = 1;
    for(int i = 1 ; i < N ; i++){
        pow1[i] = (pow1[i - 1] * base1) % mod1;
        pow2[i] = (pow2[i - 1] * base2) % mod2;
    }
}
class Hash{
private:
    int myhash1 = 0;
    int myhash2 = 0;
 
public:
    int len = 0;
    void Pushback(char x){
        myhash1 = (myhash1 * base1 + (x - 'a' + 1)) % mod1;
        myhash2 = (myhash2 * base2 + (x - 'a' + 1)) % mod2;
        len++;
    }
    void Popfront(char x){
        if(len == 0)return;
        len--;
        int mi1 = (1LL * int(x - 'a' + 1) * pow1[len]) % mod1;
        int mi2 = (1LL * int(x - 'a' + 1) * pow2[len]) % mod2;
        myhash1 = (myhash1 - mi1 + mod1) % mod1;
        myhash2 = (myhash2 - mi2 + mod2) % mod2;
    }
    pair<int,int> get(){
        return make_pair(myhash1 , myhash2);
    }
    void Clear(){
        myhash1 = 0;
        myhash2 = 0;
        len = 0;
    }
 
};
***************************************************************
hash 
ll modulo(int a, int b) {
    return ((a % b) + b) % b;
}
#define MAXLEN 1000010
 
using namespace std;
 
constexpr uint64_t mod = (1ULL << 61) - 1;
 
const uint64_t seed = chrono::system_clock::now().time_since_epoch().count();
const uint64_t base = mt19937_64(seed)() % (mod / 3) + (mod / 3);
 
uint64_t base_pow[MAXLEN];
 
int64_t modmul(uint64_t a, uint64_t b){
    uint64_t l1 = (uint32_t)a, h1 = a >> 32, l2 = (uint32_t)b, h2 = b >> 32;
    uint64_t l = l1 * l2, m = l1 * h2 + l2 * h1, h = h1 * h2;
    uint64_t ret = (l & mod) + (l >> 61) + (h << 3) + (m >> 29) + (m << 35 >> 3) + 1;
    ret = (ret & mod) + (ret >> 61);
    ret = (ret & mod) + (ret >> 61);
    return ret - 1;
}
 
void init(){
    base_pow[0] = 1;
    for (int i = 1; i < MAXLEN; i++){
        base_pow[i] = modmul(base_pow[i - 1], base);
    }
}
 
struct PolyHash{
    /// Remove suff vector and usage if reverse hash is not required for more speed
    vector<int64_t> pref, suff;
 
    PolyHash() {}
 
    template <typename T>
    PolyHash(const vector<T>& ar){
        if (!base_pow[0]) init();
 
        int n = ar.size();
        assert(n < MAXLEN);
        pref.resize(n + 3, 0), suff.resize(n + 3, 0);
 
        for (int i = 1; i <= n; i++){
            pref[i] = modmul(pref[i - 1], base) + ar[i - 1] + 997;
            if (pref[i] >= mod) pref[i] -= mod;
        }
 
        for (int i = n; i >= 1; i--){
            suff[i] = modmul(suff[i + 1], base) + ar[i - 1] + 997;
            if (suff[i] >= mod) suff[i] -= mod;
        }
    }
 
    PolyHash(const char* str)
            : PolyHash(vector<char> (str, str + strlen(str))) {}
 
    uint64_t get_hash(int l, int r){
        int64_t h = pref[r + 1] - modmul(base_pow[r - l + 1], pref[l]);
        return h < 0 ? h + mod : h;
    }
 
    uint64_t rev_hash(int l, int r){
        int64_t h = suff[l + 1] - modmul(base_pow[r - l + 1], suff[r + 2]);
        return h < 0 ? h + mod : h;
    }
};
*****************************************************************************************************************************************
scc
kosarajo
void dfs1(int i , vector<int>&vis , vector<int>adj[] , vector<int>&topo){
    vis[i] = 1;
    for(auto &ch :adj[i])
        if (!vis[ch]) dfs1(ch,vis,adj,topo);
    topo.push_back(i);
}
void dfs2(int i , vector<int>&vis , vector<int>adj[] , vector<int>&comp){
    vis[i] = 1;
    comp.push_back(i);
    for(auto &ch :adj[i])
        if (!vis[ch]) dfs2(ch,vis,adj,comp);
}
void solve(){
    int n ,m ;
    cin >> n >> m ;
    vector<int>adj[n + 1],adj2[n + 1] , vis(n + 1) , topo ;
    for (int i = 0; i <m ; ++i) {
        int u , v ;
        cin >> u >> v ;
        adj[u].push_back(v);
        adj2[v].push_back(u);
    }
    for (int i = 1; i <=n ; ++i)
        if (!vis[i]) dfs1(i,vis,adj,topo);
    reverse(all(topo)) , fill(all(vis),0);
    vector<vector<int>>components;
    for (auto &top : topo)
        if(!vis[top]){
            cout << top <<endl;
            vector<int>comp;
            dfs2(top,vis,adj2,comp);
            components.push_back(comp);
        }
    cout<<components.size()<<endl;
    for(auto cs:components){
        for(auto c :cs)cout<<c<<" ";
        cout<<endl;
    }
}
***********************************************************************************************
tarjan briges
int c = 1;
void dfs(int i ,int par, vector<int>adj[], vector<int>&vis , vector<int>&low ,vector<int>&dfsn , vector<pi>&bridges){
    dfsn[i] = low[i] = c++ ;
    vis[i] = 1;
    for(auto &ch:adj[i]){
        if(!vis[ch]){
            dfs(ch,i,adj,vis,low,dfsn,bridges);
            low[i] = min (low[ch],low[i]);
            if (low[ch] > dfsn[i]) bridges.push_back({i,ch});
        }
        else if (ch != par){
            low[i] = min (low[ch],low[i]);
        }
    }
}
************************************
int c = 1 , root ;
void dfs(int node , int par , vector<int>adj[] , vector<int>&dp , vector<int>&dfsn , vector<pi>&bridges){
    // dp [node] = number of backedges from the node (to up) + dp[allchildren] - number of backedges to the node (to down)
    dfsn[node] = c++;
    for(auto ch : adj[node]){
        if(ch == par)continue;
        if(dfsn[ch] == -1){
            dfs(ch,node , adj , dp , dfsn,bridges);
            dp[node] += dp[ch]; // dp [node] +=  number of back edges from subtree of node and up to the node
        }
        else if(dfsn[ch] < dfsn[node]){
            dp[ch]--;
            dp[node]++;
        }
    }
    if(node != root && dp[node] == 0) bridges.push_back({node,par});
}
*********************************************************************************
vector<int>dp(N + 5),dfsn(N + 5);
int num ;
int mx_diameter ;
pi dfs(int node , int par , vector<int>adj[]){
    // dp [node] = number of backedges from the node (to up) + dp[allchildren] - number of backedges to the node (to down)
    int arr[3] = {};
    dfsn[node] = num++;
    int  mx_diameter = 0;
    for(auto &ch : adj[node]){
        if(dfsn[ch] == -1){
            pi cur = dfs(ch,node,adj);  // {max diameter with bridges , max hieght of branch eith bridges}
            mx_diameter = max(mx_diameter , cur.first);
            arr[0] = cur.second;
            sort(arr, arr + 3);
            dp[node] += dp[ch];
        }
        else if(dfsn[ch] < dfsn[node] && ch != par){
            dp[ch]--;
            dp[node] ++;
        }
    }
    mx_diameter = max(mx_diameter , arr[2] + arr[1]);
    return {mx_diameter,arr[2] + (dp[node] == 0)};
}
****************************************
art point 

int timer = 1;
set<int> s;

void dfs(int i, int par,vector<int>adj[], vector<int> &dfn, vector<int> &low) {
    dfn[i] = low[i] = timer++;
    int childs = 0;
    for(auto ch : adj[i]){
        if (!dfn[ch]){
            dfs(ch,i,adj,dfn,low);
            low[i] = min (low[i],low[ch]);
            if (low[ch] >= dfn[i] && par != -1)s.insert(i);
            childs++;
        }
        else low[i] = min(low[i],dfn[ch]);
    }
    if (par == -1 && childs > 1)s.insert(i);
}
*******************************************************************************************************************
//lazy seg

struct segtree{
    vec tree,lazy;
    int n = 1;
    segtree(int sz){
        while (n <= sz)n *=2;
        tree.resize(2*n + 5 , 0);
        lazy.resize(2*n + 5 , 0);
       // build(1 , 0 , n - 1,sz );
    }
    void build(int node , int l , int r , int sz ){
        if ( l == r ){
            if (l < sz ) tree[node] = 1;
            return;
        }
        int mid = (l + r) / 2;
        build(2 * node , l , mid,sz);
       build(2 * node + 1 , mid + 1 , r ,sz);
        tree[node] = add(tree[node * 2 + 1] , tree[2 * node]);
    }
    void prop(int node , int l , int r){
        if (lazy[node] == 0 || l == r)return;
        apply(2*node,lazy[node]);
        apply(2*node+1,lazy[node]);
        lazy[node] = 0;
    }
    void apply (int node , ll m){
        tree[node] |= m;
        lazy[node] |= m;
    }
    void update (int l , int r , ll m){
        update(1,l, r , 0, n-1 , m);
    }
    void update(int node , int l , int r , int cur_l , int cur_r , ll m){
        prop(node,cur_l,cur_r);
        if (cur_r < l || cur_l > r)return;
        if (cur_l >= l && cur_r <= r){
            apply(node ,m);
            return;
        }
        int mid = (cur_l + cur_r) / 2;
        update(2 * node , l , r, cur_l , mid , m);
        update(2 * node + 1 , l , r , mid + 1 , cur_r , m);
        tree[node] = tree[node * 2 + 1] & tree[2 * node];
    }
    ll get (int l , int r){
        return get(1 , l , r , 0 , n - 1) ;
    }
    ll get(int node , int l , int r , int cur_l , int cur_r ){
        prop(node,cur_l,cur_r);
        if (cur_r < l || cur_l > r)return (ll)-1 ;
        if (cur_l >= l && cur_r <= r){
            return tree[node];
        }
        int mid = (cur_l + cur_r) / 2;
        return (get(2 * node , l , r, cur_l , mid) &  get(2 * node + 1 , l , r , mid + 1 , cur_r ));
    }
};

**************************************************************************************************************************************************************
// sparse table

struct  sparsetable{
    vector<ll>log;
    vector<vector<ll>>table;
    sparsetable(int n , vector<ll> &v){
        table.resize(n , vector<ll>(22));
        log.resize(n + 5);
        build(n , v);
    }
    ll merge (ll a , ll b){
        return min(a , b);
    }
    void build(int n , vector<ll> &v){
        for (int i = 0; i < n ; ++i) table[i][0] = v[i];

        for (int i = 1; i < 22 ; ++i)
            for (int j = 0; j + (1 << (i - 1)) < n  ; ++j)
                table[j][i] = merge(table[j][i - 1] , table[j + (1 << (i - 1))][i - 1]);

        for (int i = 2; i <= n ; ++i) log[i] = log[i / 2] + 1 ;
    }
    ll query(int l , int r){ // O(log (n))
        int sz = r - l + 1;
        ll ret = LLONG_MAX; // Depend on the type of operation
        for (int i = 21; i >= 0 ; --i)
            if (sz & (1 << i))
                ret = merge(ret, table[l][i]) , l += (1 << i);
        return ret;
    }
    ll Query(int l , int r){ // O(1)
        int sz = r - l + 1;
        int jump = log[sz];
        return merge(table[l][jump] , table[r - (1 << jump) + 1][jump]);
    }
};
/// three diminsion
struct SparseTable {
    vector<int> log;
    vector<vector<vector<int>>> table;
 
    SparseTable(int n, vector<vector<int>> &v) {
        log.resize(n + 1);
        table.resize(n, vector<vector<int>>(LOG, vector<int>(27, INT_MAX)));
        build(n, v);
    }
 
    int merge(int a, int b) {
        return min(a, b);
    }
 
    void build(int n,  vector<vector<int>> &v) {
        for (int i = 0; i < n; ++i) {
            for (int k = 1; k < 27; ++k) {
                table[i][0][k] = v[i][k];
            }
        }
 
        for (int j = 1; j < LOG; ++j) {
            for (int i = 0; i + (1 << j) <= n; ++i) {
                for (int k = 1; k < 27; ++k) {
                    table[i][j][k] = merge(table[i][j - 1][k], table[i + (1 << (j - 1))][j - 1][k]);
                }
            }
        }
 
        for (int i = 2; i <= n; ++i) {
            log[i] = log[i / 2] + 1;
        }
    }
 
    int get(int l, int r, int cntr) {
        int sz = r - l + 1;
        int j = log[sz];
        return merge(table[l][j][cntr], table[r - (1 << j) + 1][j][cntr]);
    }
};
**************************************************************************************************
find xor 
ll find_XOR(ll n ){
    int mod = n % 4;
    return (!mod ? n : mod == 1 ? 1 : mod == 2 ? n + 1 : 0);
}
ll XOR (ll l , ll r){return  (find_XOR(r) ^ find_XOR(l - 1));}
*******************************************
mono stack to get max element prev and next 

     stack<int>st;
        for (int i = 0; i < n; ++i) {
            while (st.size() && v[i].first > v[st.top()].first)nxt[st.top()] = {v[i].first , i} , st.pop();
            st.push(i);
        }
        while (st.size())st.pop();
        for (int i = n - 1; i >= 0 ; --i) {
            while (st.size() && v[i].first > v[st.top()].first)prev[st.top()] = {v[i].first,i} , st.pop();
            st.push(i);
        }
 